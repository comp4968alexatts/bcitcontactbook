'use strict';
/*
 * Environment Variables:
 * APP_ID:                  the application id generated by AWS Alexa developer console. 
 * DEBUG_EN:                the switch to enable/disable debug mode.
 * EMAIL_SENDER:            the email address used to send verification code 
 * EMAIL_SENDER_PASSWORD:   the password for the email sender 
 */
const AWS = require('aws-sdk');
const Promise = require('bluebird');
const bcrypt = require('bcryptjs');
const Alexa = require('alexa-sdk');
const APP_ID = process.env.APPLICATION_ID;
const DEBUG = process.env.DEBUG_EN ? process.env.DEBUG_EN : false;
const GmailSend = require('gmail-send');
const session_table = "session";
const department_table = "departments";
const faculty_table = "faculty";
const student_table = "students";

const emailSender = process.env.EMAIL_SENDER;
const password = process.env.EMAIL_SENDER_PASSWORD;

AWS.config.setPromisesDependency(require('bluebird'));
var docClient = new AWS.DynamoDB.DocumentClient();
Promise.promisifyAll(docClient);

function debugLog(msg) {
    if (DEBUG) 
        console.error(msg);
};


function toTitleCase(str) {
    return str.replace(/\w\S*/g, txt => {
        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    });
}

function nomalizeStudentId(str) {
    const idLength = 9;
    var pattern = 'A00000000';
    return pattern.substr(0, idLength - str.length) + str;   
} 

function sendGmail(email) {
    debugLog('email content: ');
    debugLog(email);
    var send = GmailSend(email); 
    return new Promise((resolve, reject) => { 
        send({}, (err, res) => {
            if (err)
                reject(err);
            else
                resolve(res);
        });
    });
}

function getDepartmentByName(departmentName) {
    var params ={
        TableName: department_table,
        Key : {
            "name": departmentName
        }
    }; 

    return docClient.get(params)
        .promise()
        .then(data => {
            if (Object.keys(data).length != 0)
                return Promise.resolve(data.Item);
            return data;
        });
}


function getStudentById(studentId) {
    var params ={
        TableName : student_table,
        Key : {
            "id" : studentId 
        }
    }; 

    return docClient.get(params)
        .promise()
        .then(data => {
            if (Object.keys(data).length != 0) {
                return data.Item;
            }
        });
}

function getInstructor(name) {
    var params = {
        TableName : faculty_table,
        Key : {
           "name" : name
        }
    };

    return docClient.get(params)
        .promise()
        .then( data => {
            return data.Item;
        });
} 

function createSession(session) {
    var params = {
        TableName : session_table,
        Item: session 
    };
    debugLog(params);
    return docClient.put(params).promise();
} 

function updateSession(sessionId, updates) {
    debugLog('Start update session');
    debugLog(updates);
    var params = {
        TableName : session_table,
        Key : {
            "id": sessionId
        },
        UpdateExpression: updates.UpdateExpression,
        ExpressionAttributeValues: updates.ExpressionAttributeValues
    };
    return docClient.update(params).promise();
}

function getSessionFromDb(sessionId) {
    var params ={
        TableName : session_table,
        Key : {
            "id": sessionId
        }
    }; 

    return docClient.get(params)
        .promise()
        .then(data=>{
            if (Object.keys(data).length != 0) {
                return data.Item; 
            }
        });
}

function deleteSessionFromDb(sessionId) {
    var params = {
        TableName : session_table,
        Key : {
            "id" : sessionId
        }
    };

    return docClient.delete(params).promise();
}

function generateVerificationCode(sessionId) {
    var rand;
    while (true) {
        rand = Math.floor(Math.random() * 10000);
        if (rand > 1000)
            break;
    }
    rand = '' + rand;
    debugLog('Generating hash...');

    var salt = bcrypt.genSaltSync(10);
    var hash = bcrypt.hashSync(rand, salt);

    var updates = {
        UpdateExpression : "set verifycode = :code",
        ExpressionAttributeValues : {
            ':code' : hash 
        }
    };
    return updateSession(sessionId, updates).then(() => {
        return {
            text : rand,
            hash : hash
        };
    });
}

const launchRequestHandler = function () {
    this.emit(':ask','Welcome to B.C.I.T Contacts. What are you searching for?');
};

const searchPublicContactIntentHandler = function(){
    var departmentName = this.event.request.intent.slots.departmentName.value;
    debugLog(departmentName);

    if (typeof departmentName === 'undefined' || departmentName.length === 0 )
        this.emit('Unhandled');

    getDepartmentByName(toTitleCase(departmentName))
        .then(department => {
            var speechText = "";
            if (Object.keys(department).length != 0) {
                debugLog(department);
                speechText = 'The phone number of the ' + departmentName + ' is <say-as interpret-as="telephone">' + department.phone + '</say-as>'; 
            } else {
                speechText = 'Sorry, no result is found. You can try another search'; 
            }
            this.response.speak(speechText)
                .listen('Do you want to search another one?');
            this.emit(':responseReady');
        })
        .catch(error => {
            debugLog(error);
            this.emit('SessionEndedRequest');
        });

};

var searchPrivateContactIntentHandler = function() {
    var personName = toTitleCase(this.event.request.intent.slots.personName.value);
    var sessionId = this.event.session.sessionId;
    var speechText = "";

    debugLog(personName);

    if (typeof personName === 'undefined' || personName.length === 0 )
        this.emit('Unhandled');

    getSessionFromDb(sessionId).then(session => {
        if (session && session.authenticated) {
            return getInstructor(personName)
                .then(instructor => {
                    debugLog(instructor);
                    if (instructor)
                        speechText = "The phone number of " + personName + " is : <say-as interpret-as=\"telephone\">" + instructor.phone + "</say-as>"; 
                    else 
                        speechText = "Sorry, no result is found."
                    this.response.speak(speechText).listen('What else are you searching for?');
                    this.emit(':responseReady');
                    return true 
                });
            }
            return session; 
        })
        .then(session => {
            debugLog('line: 231');
            debugLog(session);
            if (!session) {
                session = {
                id : sessionId,
                authenticated: false,
                verifycode: "null"
                };
                return createSession(session);
            }
            return session;
        })
        .then((session)=>{
            speechText = "Sorry, the information your are searching for requires authentication. Please tell me your student I.D."
            this.response.speak(speechText).listen('please tell me your student I.D to verify your identity.');
            this.emit(':responseReady');
        })
        .catch(error => {
            debugLog(error);
            this.emit('SessionEndedRequest');
        });
};

var sendVerificationCodeIntentHandler = function () {
    var studentId = nomalizeStudentId(this.event.request.intent.slots.studentId.value);
    var sessionId = this.event.session.sessionId;
    var receiver = ''; 
    debugLog(studentId);

    if (typeof studentId === 'undefined' || studentId.length === 0 )
        this.emit('Unhandled');

    getStudentById(studentId).then(student =>{
        if (!student) {
            this.response.speak('Sorry, the student I.D is incorrect. Please tell me your student I.D').listen('Please tell me your student I.D');
            this.emit(':responseReady');
        } 
        receiver = student.email;
        return generateVerificationCode(sessionId); 
    }).then(code =>{
        var email = {
            user : emailSender,
            pass : password,
            to : receiver,
            subject : 'Verification Code for BCIT contact book',
            text : code.text
        };
        return sendGmail(email);
    }).then(sendResult => {
        debugLog(sendResult);
        this.response
            .speak('A verifcation code has been sent to your registered email address, Please check your email and tell me the verification code.')
            .listen('Please tell me the verification code');
        this.emit(':responseReady');
    }).catch(error => {
        debugLog(error);
    });
};

var getVerificationCodeHandler = function() {
    var code = this.event.request.intent.slots.verificationCode.value;
    debugLog(code);

    if (typeof code === 'undefined' || code.length == 0)
        this.emit('Unhandled');
    var sessionId = this.event.session.sessionId;

    getSessionFromDb(sessionId).then(session => {
        if (bcrypt.compareSync(code, session.verifycode)) {

            var updates = {
                UpdateExpression : "set verifycode = :code, authenticated = :auth",
                ExpressionAttributeValues : {
                    ':code' : 'null',
                    ':auth' : true
                }
            };
            return updateSession(sessionId, updates)
        } else {
            this.response.speak('Sorry, the code is ivalid. Please try again.')
                .listen('Please check your email and tell me the verification code.')
            this.emit(':responseReady');
        }
    }).then((authenticated)=>{
        this.response.speak('You have been authenticated. Try a new search now.')
            .listen('What are you searching for?')
        this.emit(':responseReady');

    }).catch(error=>{
        debugLog(error);
        this.emit('endSessionHandler');
    });  
};

var endSessionHandler = function() {
    // do other clean up jobs
    var sessionId = this.event.session.sessionId;
    deleteSessionFromDb(sessionId);

    this.response.speak('Thanks for using B.C.I.T contact book. Bye!');
    this.emit(':responseReady');
};

var handlers = {
    'LaunchRequest': launchRequestHandler,
    'searchPublicContactIntent': searchPublicContactIntentHandler,
    'searchPrivateContactIntent': searchPrivateContactIntentHandler,
    'sendVerificationCodeIntent' : sendVerificationCodeIntentHandler,
    'getVerificationCodeIntent' : getVerificationCodeHandler,
    'SessionEndedRequest': endSessionHandler,
    'AMAZON.CancelIntent': endSessionHandler,
    'AMAZON.StopIntent': endSessionHandler,
    'AMAZON.NoIntent': endSessionHandler,
    'AMAZON.YesIntent': function() {
        this.emit(':ask', 'What are you searching for?');
    },
    'AMAZON.HelpIntent': function() {
        this.emit(':ask', 'Tell me what are you searching for. For example, what\'s the number of the library? Or, What\'s the number of Professor Bill Klug?');
    },
    'Unhandled': function () {
        debugLog('Unhandled function');
        this.emit(':ask', 'I don\'t get it! Can you say that again?', 'I don\'t get it! Can you say that again?');
    }
};

exports.handler = function(event, context, callback){
    var alexa = Alexa.handler(event, context, callback);
    alexa.appId = APP_ID;
    alexa.registerHandlers(handlers);
    alexa.execute();
};

